// <auto-generated />
using System;
using GestorDeTurnos.Identity.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestorDeTurnos.Identity.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20240614035405_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GestorDeTurnos.Identity.Models.CustomIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ec3cd357-0298-4602-abb1-5effcf233389",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5592abb-fa47-4dcc-b982-19b2e0af8a55",
                            Email = "propietario@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROPIETARIO@GMAIL.COM",
                            NormalizedUserName = "PROPIETARIO",
                            PasswordHash = "AQAAAAIAAYagAAAAEDMYgJH+FSW2hwytLjZVkDxD4JNaun88qWykBB3oMtWDPJq3rY2xglHEc/EmvZqYTQ==",
                            PhoneNumber = "000-000-0001",
                            PhoneNumberConfirmed = true,
                            ProfileImage = "",
                            SecurityStamp = "56f125f2-2e9f-43ed-a9d4-22f0f6806eb0",
                            TwoFactorEnabled = false,
                            UserName = "propietario"
                        },
                        new
                        {
                            Id = "95987a31-7bd5-4bb0-a888-f2cc06108ec1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8be51a70-45c7-41a2-abb6-c4da6f570dda",
                            Email = "empleado@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLEADO@GMAIL.COM",
                            NormalizedUserName = "EMPLEADO",
                            PasswordHash = "AQAAAAIAAYagAAAAEAxLFxvCrGChB03uXwDK4dKgm5o20hUcj548OV90rjbQVYgAtwsRdAcRPkZvVagHSQ==",
                            PhoneNumber = "000-000-0002",
                            PhoneNumberConfirmed = true,
                            ProfileImage = "",
                            SecurityStamp = "5641b136-e856-48a0-aa05-dd1f36cf05d2",
                            TwoFactorEnabled = false,
                            UserName = "empleado"
                        },
                        new
                        {
                            Id = "7bfc5c75-a9fa-4623-8e0c-4c1a2dc8cbda",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ae06251-fcac-4477-8344-761a88359270",
                            Email = "cliente@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Tie",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENTE@GMAIL.COM",
                            NormalizedUserName = "CLIENTE",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYf6NtyHMjvNWl3gMZaGhuixSTbmYj1UIh47UBqwAGXRbCMp8hQQdye8T0j2BKa9w==",
                            PhoneNumber = "000-000-0000",
                            PhoneNumberConfirmed = true,
                            ProfileImage = "",
                            SecurityStamp = "7a5c3f6b-b7de-4163-b92a-dd2aa800e568",
                            TwoFactorEnabled = false,
                            UserName = "cliente"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "96002ed6-73e4-4355-9b22-6b7d4c6bed53",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        },
                        new
                        {
                            Id = "d9b88570-5675-4112-afb5-302a6e40eb80",
                            Name = "Propietario",
                            NormalizedName = "PROPIETARIO"
                        },
                        new
                        {
                            Id = "31d211a3-f5cf-4fa1-b615-265d63f00646",
                            Name = "Empleado",
                            NormalizedName = "EMPLEADO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ec3cd357-0298-4602-abb1-5effcf233389",
                            RoleId = "96002ed6-73e4-4355-9b22-6b7d4c6bed53"
                        },
                        new
                        {
                            UserId = "ec3cd357-0298-4602-abb1-5effcf233389",
                            RoleId = "d9b88570-5675-4112-afb5-302a6e40eb80"
                        },
                        new
                        {
                            UserId = "95987a31-7bd5-4bb0-a888-f2cc06108ec1",
                            RoleId = "96002ed6-73e4-4355-9b22-6b7d4c6bed53"
                        },
                        new
                        {
                            UserId = "95987a31-7bd5-4bb0-a888-f2cc06108ec1",
                            RoleId = "31d211a3-f5cf-4fa1-b615-265d63f00646"
                        },
                        new
                        {
                            UserId = "7bfc5c75-a9fa-4623-8e0c-4c1a2dc8cbda",
                            RoleId = "96002ed6-73e4-4355-9b22-6b7d4c6bed53"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GestorDeTurnos.Identity.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GestorDeTurnos.Identity.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorDeTurnos.Identity.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GestorDeTurnos.Identity.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
